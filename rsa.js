/*
    Minified with Terser 5.12.1.
    Unminified source: rsa.src.js
*/
(()=>{let e=!1;const t=e=>{if(document.selection)(t=document.body.createTextRange()).moveToElementText(document.getElementById(e)),t.select();else if(window.getSelection){var t;(t=document.createRange()).selectNode(document.getElementById(e)),window.getSelection().removeAllRanges(),window.getSelection().addRange(t)}},n=async e=>{const t=document.getElementById(e);return t.select(),t.setSelectionRange(0,99999),await navigator.clipboard.writeText(t.value),""},o=$("#gen"),a=$("#privateKey"),c=$("#publicKey"),r=$("#keySize"),i=$("#hash"),l={2048:2048,3072:3072,4096:4096,SHA256:"SHA-256",SHA384:"SHA-284",SHA512:"SHA-512"};o.click((()=>{const t=r.val(),n=i.val();(async(e,t)=>{const n=crypto.subtle,o=e=>{const t=new Uint8Array(e);let n="";for(var o=0;o<t.byteLength;o++)n+=String.fromCharCode(t[o]);let a=btoa(n);return a=a.match(/.{1,64}/g).join("\n"),a},a={name:"RSA-OAEP",modulusLength:e,publicExponent:new Uint8Array([1,0,1]),hash:t},c=await n.generateKey(a,!0,["encrypt","decrypt"]),r=c.publicKey,i=c.privateKey,l=await n.exportKey("spki",r);return{private:"-----BEGIN RSA PRIVATE KEY-----\n"+o(await n.exportKey("pkcs8",i))+"\n-----END RSA PRIVATE KEY-----\n",public:"-----BEGIN PUBLIC KEY-----\n"+o(l)+"\n-----END PUBLIC KEY-----\n"}})(l[t],l[n]).then((t=>{a.text(t.private),c.text(t.public),e=!0})).catch((e=>{alert("There was an error generating your keys. Check debug console for more info."),console.error(e)}))}));const s=document.getElementById("copyToast");a.click((()=>{e&&(t("privateKey"),n("privateKey").then((()=>{new bootstrap.Toast(s).show()})))})),c.click((()=>{e&&(t("publicKey"),n("publicKey").then((()=>{new bootstrap.Toast(s).show()})))}))})();